<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Life's lessons]]></title>
  <link href="http://unshakeable.github.io/atom.xml" rel="self"/>
  <link href="http://unshakeable.github.io/"/>
  <updated>2014-11-09T23:28:04-06:00</updated>
  <id>http://unshakeable.github.io/</id>
  <author>
    <name><![CDATA[Dev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Iterating Javascript Object Properties]]></title>
    <link href="http://unshakeable.github.io/blog/2014/11/09/iterating-javascript-object-properties/"/>
    <updated>2014-11-09T23:17:08-06:00</updated>
    <id>http://unshakeable.github.io/blog/2014/11/09/iterating-javascript-object-properties</id>
    <content type="html"><![CDATA[<p>You can use for-in loop to iterate an object&rsquo;s properties. Only thing to be carefull is that this will also list inherited properties.
To filter inherited properties use hasOwnProperty() method.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var parentObj = {
</span><span class='line'>  prop1 : 1,
</span><span class='line'>  prop2 : 2,
</span><span class='line'>  prop3 : 3
</span><span class='line'>}
</span><span class='line'>var childObj = Object.create(parentObj);
</span><span class='line'>childObj.prop4 = 4;
</span><span class='line'>
</span><span class='line'>for(var prop in childObj){
</span><span class='line'>  console.log(prop); // prop1, prop2, prop3
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>for(var prop in childObj){
</span><span class='line'>  if(childObj.hasOwnProperty(prop)){
</span><span class='line'>      console.log(prop); //prop4
</span><span class='line'>  }
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding JavaScript Object's Length.]]></title>
    <link href="http://unshakeable.github.io/blog/2014/11/09/finding-javascript-objects-length/"/>
    <updated>2014-11-09T23:00:51-06:00</updated>
    <id>http://unshakeable.github.io/blog/2014/11/09/finding-javascript-objects-length</id>
    <content type="html"><![CDATA[<p>Although, JavaScript Objects have a build-in &ldquo;lenght&rdquo; property, it will not give you the exact number of properties. The trick is to use Object.keys(objectName).length.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var myObj = {
</span><span class='line'>  a : 1,
</span><span class='line'>  b : 2,
</span><span class='line'>  c : 3
</span><span class='line'>}
</span><span class='line'>var myObjLength = Object.keys(myObj).length //3</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
