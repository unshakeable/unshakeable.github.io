<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Life's lessons]]></title>
  <link href="http://unshakeable.github.io/atom.xml" rel="self"/>
  <link href="http://unshakeable.github.io/"/>
  <updated>2015-03-20T20:56:29-04:00</updated>
  <id>http://unshakeable.github.io/</id>
  <author>
    <name><![CDATA[Dev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress and Github Pages]]></title>
    <link href="http://unshakeable.github.io/blog/2015/03/20/octopress-and-github-pages/"/>
    <updated>2015-03-20T00:00:00-04:00</updated>
    <id>http://unshakeable.github.io/blog/2015/03/20/octopress-and-github-pages</id>
    <content type="html"><![CDATA[<p>To create a new post:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post "Octopress and Github pages"</span></code></pre></td></tr></table></div></figure>


<p>A markdown file will be created at C:\blog\source_posts\xxx. Edit the file to add your content.</p>

<p>To generate the site and publish it on local machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> generate the site: rake generate && rake preview</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Commands]]></title>
    <link href="http://unshakeable.github.io/blog/2014/11/15/unix-commands/"/>
    <updated>2014-11-15T16:29:15-05:00</updated>
    <id>http://unshakeable.github.io/blog/2014/11/15/unix-commands</id>
    <content type="html"><![CDATA[<p>Here are most common Unix commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tree .git</span></code></pre></td></tr></table></div></figure>


<p>displays content of .git directory in tree format.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>clear </span></code></pre></td></tr></table></div></figure>


<p>clears the screen</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls or ll</span></code></pre></td></tr></table></div></figure>


<p>displays the content of current directory.</p>

<p>Read below article to get very good understanding of .bash_profile, .profile and .bashrc</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://dghubble.com/blog/posts/.bashprofile-.profile-and-.bashrc-conventions/</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Commands]]></title>
    <link href="http://unshakeable.github.io/blog/2014/11/15/git-commands/"/>
    <updated>2014-11-15T16:05:31-05:00</updated>
    <id>http://unshakeable.github.io/blog/2014/11/15/git-commands</id>
    <content type="html"><![CDATA[<p>Git is a distributed version control system for code. Here are the most common Git commands with there brief description.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git --version</span></code></pre></td></tr></table></div></figure>


<p>above command will display the version of installed git.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init</span></code></pre></td></tr></table></div></figure>


<p>above command initiate git repository in the current directory. If you open the folder in windows explorer, you will see a hidden .git folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git status</span></code></pre></td></tr></table></div></figure>


<p>displays the status of files in repository. Untracked or modified files will be displayed in red.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add first.txt \\Enable tracking for first.txt only.
</span><span class='line'>git add . \\Enable tracking for all the files in current directory.</span></code></pre></td></tr></table></div></figure>


<p>Add command is used for enabling tracking for files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rm --cached first.txt \\removes tracking for first.txt.</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit -m "your message" \\Adds all tracked files to staging area.</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global user.name 'unshakable'
</span><span class='line'>git config --global user.email 'foo.bar@gmail.com' </span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git log
</span><span class='line'>Shift + zz : to exit out of log command.
</span><span class='line'>
</span><span class='line'>git log --oneline //display only messages used while committing.</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git diff
</span><span class='line'>git diff -cached</span></code></pre></td></tr></table></div></figure>


<p>Pull request: Is done by other folks after forking your project and improving it. It basically means the person is requesting you to accept his changes after review and merge them to main repository.</p>

<iframe src="http://showterm.io/7b5f8d42ba021511e627e" width="640" height="480"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manipulating JavaScript Arrays]]></title>
    <link href="http://unshakeable.github.io/blog/2014/11/10/manipulating-javascript-arrays/"/>
    <updated>2014-11-10T23:07:11-05:00</updated>
    <id>http://unshakeable.github.io/blog/2014/11/10/manipulating-javascript-arrays</id>
    <content type="html"><![CDATA[<p>JavaScript provides static and instance methods on Array and Array.prototype respectively for manipulating arrays.</p>

<h3>sort(Instance method):</h3>

<p>You can sort array using this method. You can provide a callback function to customize the sorting behavior.</p>

<figure class='code'><figcaption><span>Ascending order</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myArr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
</span><span class='line'><span class="nx">myArr</span><span class="p">.</span><span class="nx">sort</span><span class="p">();</span> <span class="c1">//[1, 2, 4, 5, 5, 6, 7]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Descending order</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myArr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
</span><span class='line'><span class="nx">myArr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">y</span> <span class="o">-</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span> <span class="c1">//[7, 6, 5, 5, 4, 2, 1]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>forEach(Instance method):</h3>

<p>You can use forEach method to iterate a array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myArr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">];</span>
</span><span class='line'><span class="nx">myArr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">idx</span><span class="p">,</span> <span class="nx">orgArr</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span> <span class="c1">//4,5,7</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">idx</span><span class="p">);</span> <span class="c1">//0,1,2</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">orgArr</span><span class="p">);</span> <span class="c1">//[4,5,7][4,5,7][4,5,7]</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>slice(Instance method):</h3>

<p>You can slice a array using this method. It return a new array and the original array is not effected.</p>

<figure class='code'><figcaption><span>Syntax</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[].slice(startIdx, endIdx)
</span><span class='line'>startIdx : starting index for slicing.
</span><span class='line'>endIdx : Ending index to stop slicing. endIdx is excluded from the output.</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myArr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
</span><span class='line'><span class="nx">myArr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span> <span class="c1">//[7,2]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterating Java Script Object Properties]]></title>
    <link href="http://unshakeable.github.io/blog/2014/11/10/iterating-javascript-object-properties/"/>
    <updated>2014-11-10T00:17:08-05:00</updated>
    <id>http://unshakeable.github.io/blog/2014/11/10/iterating-javascript-object-properties</id>
    <content type="html"><![CDATA[<p>You can use for-in loop to iterate an object&rsquo;s properties. Only thing to be careful is that this will also list inherited properties.
To filter inherited properties use hasOwnProperty() method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">parentObj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">prop1</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">prop2</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">prop3</span> <span class="o">:</span> <span class="mi">3</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">childObj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">parentObj</span><span class="p">);</span>
</span><span class='line'><span class="nx">childObj</span><span class="p">.</span><span class="nx">prop4</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">prop</span> <span class="k">in</span> <span class="nx">childObj</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prop</span><span class="p">);</span> <span class="c1">// prop1, prop2, prop3</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">prop</span> <span class="k">in</span> <span class="nx">childObj</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">childObj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">prop</span><span class="p">)){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prop</span><span class="p">);</span> <span class="c1">//prop4</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding JavaScript Object's Length.]]></title>
    <link href="http://unshakeable.github.io/blog/2014/11/10/finding-javascript-objects-length/"/>
    <updated>2014-11-10T00:00:51-05:00</updated>
    <id>http://unshakeable.github.io/blog/2014/11/10/finding-javascript-objects-length</id>
    <content type="html"><![CDATA[<p>Although, JavaScript Objects have a build-in &ldquo;length&rdquo; property, it will not give you the exact number of properties. The trick is to use Object.keys(objectName).length.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myObj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">:</span> <span class="mi">3</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myObjLength</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">myObj</span><span class="p">).</span><span class="nx">length</span> <span class="c1">//3</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
